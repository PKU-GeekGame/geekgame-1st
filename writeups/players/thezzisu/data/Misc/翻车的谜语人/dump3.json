{
  "name": "Untitled.ipynb",
  "path": "Untitled.ipynb",
  "last_modified": "2021-11-06T07:43:22.084991Z",
  "created": "2021-11-06T07:43:22.084991Z",
  "content": {
    "cells": [
      {
        "cell_type": "code",
        "execution_count": 26,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "import zwsp_steg\nfrom Crypto.Random import get_random_bytes"
      },
      {
        "cell_type": "code",
        "execution_count": 27,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "import binascii"
      },
      {
        "cell_type": "code",
        "execution_count": 28,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "def genflag():\n    return 'flag{%s}'%binascii.hexlify(get_random_bytes(16)).decode()"
      },
      {
        "cell_type": "code",
        "execution_count": 29,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "flag1 = genflag()\nflag2 = genflag()"
      },
      {
        "cell_type": "code",
        "execution_count": 30,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "key = get_random_bytes(len(flag1))"
      },
      {
        "cell_type": "code",
        "execution_count": 31,
        "metadata": { "trusted": true },
        "outputs": [
          {
            "data": {
              "text/plain": "b'\\x1e\\xe0[u\\xf2\\xf2\\x81\\x01U_\\x9d!yc\\x8e\\xce[X\\r\\x04\\x94\\xbc9\\x1d\\xd7\\xf8\\xde\\xdcd\\xb2Q\\xa3\\x8a?\\x16\\xe5\\x8a9'"
            },
            "execution_count": 31,
            "metadata": {},
            "output_type": "execute_result"
          }
        ],
        "source": "key"
      },
      {
        "cell_type": "code",
        "execution_count": 32,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "def xor_each(k, b):\n    assert len(k)==len(b)\n    out = []\n    for i in range(len(b)):\n        out.append(b[i]^k[i])\n    return bytes(out)"
      },
      {
        "cell_type": "code",
        "execution_count": 33,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "encoded_flag1 = xor_each(key, flag1.encode())\nencoded_flag2 = xor_each(key, flag2.encode())"
      },
      {
        "cell_type": "code",
        "execution_count": 35,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": "with open('flag1.txt', 'wb') as f:\n    f.write(binascii.hexlify(encoded_flag1))"
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": { "trusted": true },
        "outputs": [],
        "source": ""
      }
    ],
    "metadata": {
      "kernelspec": {
        "display_name": "Python 3 (ipykernel)",
        "language": "python",
        "name": "python3"
      },
      "language_info": {
        "codemirror_mode": { "name": "ipython", "version": 3 },
        "file_extension": ".py",
        "mimetype": "text/x-python",
        "name": "python",
        "nbconvert_exporter": "python",
        "pygments_lexer": "ipython3",
        "version": "3.8.3rc1"
      }
    },
    "nbformat": 4,
    "nbformat_minor": 4
  },
  "format": "json",
  "mimetype": null,
  "size": 2605,
  "writable": true,
  "type": "notebook"
}
